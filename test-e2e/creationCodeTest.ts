import hre, { ethers } from 'hardhat'
import { expect } from 'chai'
import { JsonRpcProvider } from '@ethersproject/providers'
import {
  CreationCodeTest,
  CreationCodeTest__factory,
  L1AtomicTokenBridgeCreator,
  L1AtomicTokenBridgeCreator__factory,
} from '../build/types'
import path from 'path'
import fs from 'fs'

const LOCALHOST_L2_RPC = 'http://localhost:8547'

let provider: JsonRpcProvider
let creationCodeTester: CreationCodeTest
let l1TokenBridgeCreator: L1AtomicTokenBridgeCreator

describe('creationCodeTest', () => {
  before(async function () {
    /// get default deployer params in local test env
    provider = new ethers.providers.JsonRpcProvider(LOCALHOST_L2_RPC)
    const deployerKey = ethers.utils.sha256(
      ethers.utils.toUtf8Bytes('user_token_bridge_deployer')
    )
    const deployer = new ethers.Wallet(deployerKey, provider)

    /// tester which implements the 'getCreationCode' (identical as internal function `_creationCodeFor()` implemented by L1/L2 factories)
    const testerFactory = await new CreationCodeTest__factory(deployer).deploy()
    creationCodeTester = await testerFactory.deployed()

    /// token bridge creator which has the templates stored
    l1TokenBridgeCreator = await _getTokenBridgeCreator(provider)
  })

  it('compiler generated and solidity lib generated creation code should match for L2 templates', async function () {
    expect(await _getCompilerGeneratedCreationCode('L2GatewayRouter')).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2RouterTemplate()
      )
    )

    expect(await _getCompilerGeneratedCreationCode('L2ERC20Gateway')).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2StandardGatewayTemplate()
      )
    )

    expect(await _getCompilerGeneratedCreationCode('L2CustomGateway')).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2CustomGatewayTemplate()
      )
    )

    expect(await _getCompilerGeneratedCreationCode('L2WethGateway')).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2WethGatewayTemplate()
      )
    )

    expect(await _getCompilerGeneratedCreationCode('ArbMulticall2')).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2MulticallTemplate()
      )
    )

    expect(
      await _getCompilerGeneratedCreationCode('L2AtomicTokenBridgeFactory')
    ).to.be.eq(
      await _getSolidityLibGeneratedCreationCode(
        provider,
        creationCodeTester,
        await l1TokenBridgeCreator.l2TokenBridgeFactoryTemplate()
      )
    )
  })
})

async function _getCompilerGeneratedCreationCode(
  contractName: string
): Promise<string> {
  //  get creation code generated by the compiler
  const artifact = await hre.artifacts.readArtifact(contractName)
  return artifact.bytecode
}

async function _getSolidityLibGeneratedCreationCode(
  provider: JsonRpcProvider,
  creationCodeTester: CreationCodeTest,
  templateAddress: string
) {
  const runtimeCode = await provider.getCode(templateAddress)
  const solidityLibGeneratedCreationCode =
    await creationCodeTester.creationCodeFor(runtimeCode)

  return solidityLibGeneratedCreationCode
}

async function _getTokenBridgeCreator(
  provider: JsonRpcProvider
): Promise<L1AtomicTokenBridgeCreator> {
  const localNetworkFile = path.join(__dirname, '..', 'network.json')
  if (!fs.existsSync(localNetworkFile)) {
    throw new Error("Can't find network.json file")
  }
  const data = JSON.parse(fs.readFileSync(localNetworkFile).toString())
  return L1AtomicTokenBridgeCreator__factory.connect(
    data['l1TokenBridgeCreator'],
    provider
  )
}
